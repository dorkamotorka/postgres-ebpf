// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadPostgres returns the embedded CollectionSpec for postgres.
func loadPostgres() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_PostgresBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load postgres: %w", err)
	}

	return spec, err
}

// loadPostgresObjects loads postgres and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*postgresObjects
//	*postgresPrograms
//	*postgresMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadPostgresObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadPostgres()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// postgresSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type postgresSpecs struct {
	postgresProgramSpecs
	postgresMapSpecs
}

// postgresSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type postgresProgramSpecs struct {
	HandleWrite *ebpf.ProgramSpec `ebpf:"handle_write"`
}

// postgresMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type postgresMapSpecs struct {
}

// postgresObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadPostgresObjects or ebpf.CollectionSpec.LoadAndAssign.
type postgresObjects struct {
	postgresPrograms
	postgresMaps
}

func (o *postgresObjects) Close() error {
	return _PostgresClose(
		&o.postgresPrograms,
		&o.postgresMaps,
	)
}

// postgresMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadPostgresObjects or ebpf.CollectionSpec.LoadAndAssign.
type postgresMaps struct {
}

func (m *postgresMaps) Close() error {
	return _PostgresClose()
}

// postgresPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadPostgresObjects or ebpf.CollectionSpec.LoadAndAssign.
type postgresPrograms struct {
	HandleWrite *ebpf.Program `ebpf:"handle_write"`
}

func (p *postgresPrograms) Close() error {
	return _PostgresClose(
		p.HandleWrite,
	)
}

func _PostgresClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed postgres_bpfel.o
var _PostgresBytes []byte
